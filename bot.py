import telegram
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from telegram.constants import ParseMode
from datetime import datetime, timedelta
import logging
import json
from cryptography.fernet import Fernet
from config import TOKEN, ADMIN_ID
import os
import re
import aiofiles
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
import asyncio

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: (DEBUG, INFO, WARNING, ERROR, CRITICAL)
logging.basicConfig(level=logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
def load_key():
    with open('encryption.key', 'rb') as key_file:
        return key_file.read()

def encrypt_data(data):
    key = load_key()
    fernet = Fernet(key)
    return fernet.encrypt(json.dumps(data).encode())

def decrypt_data(encrypted_data):
    key = load_key()
    fernet = Fernet(key)
    return json.loads(fernet.decrypt(encrypted_data).decode())

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
async def load_encrypted_file(filename):
    try:
        if not os.path.exists(filename):
            return {}
        async with aiofiles.open(filename, 'rb') as file:
            encrypted_data = await file.read()
        return decrypt_data(encrypted_data)
    except FileNotFoundError:
        logging.info("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π.")
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ {filename}: {e}")
        return {}

# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
async def save_encrypted_file(filename, data):
    try:
        encrypted_data = encrypt_data(data)
        async with aiofiles.open(filename, 'wb') as file:
            await file.write(encrypted_data)
        logging.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename} (–∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã).")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ {filename}: {e}")

async def save_data(users):
    await save_encrypted_file('users.json', users)

async def load_data():
    users = await load_encrypted_file('users.json')
    if not users:
        users = {}
        await save_data(users)
    return users

async def save_active_chats():
    try:
        async with aiofiles.open('active_chats.json', 'wb') as file:
            encrypted_data = encrypt_data(active_chats)
            await file.write(encrypted_data)
        logging.info("–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")

async def load_active_chats():
    try:
        if not os.path.exists('active_chats.json'):
            return {}
        async with aiofiles.open('active_chats.json', 'rb') as file:
            encrypted_data = await file.read()
        return decrypt_data(encrypted_data)
    except FileNotFoundError:
        logging.info("–§–∞–π–ª —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return {}
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {e}")
        return {}

# –î–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async def save_blocked_users(blocked_users):
    await save_encrypted_file('blocked_users.json', blocked_users)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
async def load_blocked_users():
    return await load_encrypted_file('blocked_users.json')

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ is_blocked –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∞–π–º-–∞—É—Ç–æ–≤
async def is_blocked(user1, user2):
    blocked_users = await load_blocked_users()
    pair = ",".join(sorted([user1, user2]))
    if pair in blocked_users:
        block_time = datetime.fromisoformat(blocked_users[pair])
        if datetime.now() < block_time:
            return True
        else:
            # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∏ –ª–æ–≥–∏—Ä—É–µ–º –≤—ã—Ö–æ–¥ –∏–∑ —Ç–∞–π–º-–∞—É—Ç–∞
            del blocked_users[pair]
            await save_blocked_users(blocked_users)
            logging.info(f"(!) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {user1} –∏ {user2} –≤—ã—à–ª–∏ –∏–∑ —Ç–∞–π–º-–∞—É—Ç–∞.")
    return False

# –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å–ª–æ–≤–∞
def convert_timeout_to_words(timeout_str):
    time_amount = int(timeout_str[:-1])
    time_unit = timeout_str[-1]

    if time_unit == 's':
        return f"{time_amount} —Å–µ–∫"
    elif time_unit == 'm':
        return f"{time_amount} –º–∏–Ω"
    elif time_unit == 'h':
        return f"{time_amount} —á–∞—Å"
    elif time_unit == 'd':
        return f"{time_amount} –¥–µ–Ω—å"

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /timeout
async def timeout_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if len(context.args) == 0:
        # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç –∏–∑ blocked_users.json
        blocked_users = await load_blocked_users()
        last_timeout = blocked_users.get("timeout_duration", "1h")
        last_timeout_words = convert_timeout_to_words(last_timeout)
        await update.message.reply_text(f"_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /timeout <–≤—Ä–µ–º—è>\n–¢–µ–∫—É—â–∏–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–∞–π–º-–∞—É—Ç: {last_timeout_words}_", parse_mode=ParseMode.MARKDOWN)
        return

    if len(context.args) != 1:
        await update.message.reply_text("_–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /timeout <–≤—Ä–µ–º—è>_", parse_mode=ParseMode.MARKDOWN)
        return

    timeout_str = context.args[0]
    if not re.match(r'^\d+[smhd]$', timeout_str):
        await update.message.reply_text("_–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ s –¥–ª—è —Å–µ–∫—É–Ω–¥, m –¥–ª—è –º–∏–Ω—É—Ç, h –¥–ª—è —á–∞—Å–æ–≤ –∏–ª–∏ d –¥–ª—è –¥–Ω–µ–π_\n_–ù–∞–ø—Ä–∏–º–µ—Ä: /timeout 30—Å, /timeout 1–º, /timeout 1—á, /timeout 1–¥_", parse_mode=ParseMode.MARKDOWN)
        return

    time_amount = int(timeout_str[:-1])
    time_unit = timeout_str[-1]

    if time_unit == 's':
        timeout_duration = timedelta(seconds=time_amount)
    elif time_unit == 'm':
        timeout_duration = timedelta(minutes=time_amount)
    elif time_unit == 'h':
        timeout_duration = timedelta(hours=time_amount)
    elif time_unit == 'd':
        timeout_duration = timedelta(days=time_amount)
    else:
        await update.message.reply_text("_–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ s –¥–ª—è —Å–µ–∫—É–Ω–¥, m –¥–ª—è –º–∏–Ω—É—Ç, h –¥–ª—è —á–∞—Å–æ–≤ –∏–ª–∏ d –¥–ª—è –¥–Ω–µ–π_", parse_mode=ParseMode.MARKDOWN)
        return

    if timeout_duration > timedelta(days=1):
        await update.message.reply_text(f"_–ú—ã –Ω–µ —Å–æ–≤–µ—Ç—É–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞—Å—Ç–æ–ª—å–∫–æ –¥–æ–ª–≥–∏–π —Ç–∞–π–º-–∞—É—Ç_", parse_mode=ParseMode.MARKDOWN)

    blocked_users = await load_blocked_users()
    blocked_users["timeout_duration"] = timeout_str
    await save_blocked_users(blocked_users)
    context.bot_data["last_timeout"] = timeout_str
    timeout_words = convert_timeout_to_words(timeout_str)
    await update.message.reply_text(f"*‚è≥ –¢–∞–π–º-–∞—É—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {timeout_words}*", parse_mode=ParseMode.MARKDOWN)

# –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def get_keyboard(is_searching=False):
    buttons = []
    if not is_searching:
        buttons.append([KeyboardButton("üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞")])
        buttons.append([KeyboardButton("üé≠ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É")])
        buttons.append([KeyboardButton("üìô –ò–Ω—Ç–µ—Ä–µ—Å—ã")])
        buttons.append([KeyboardButton("üíº –ü—Ä–æ—Ñ–∏–ª—å")])  # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Ñ–∏–ª—è
    else:
        buttons.append([KeyboardButton("‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")])
    return ReplyKeyboardMarkup(buttons, resize_keyboard=True)

# –ü–û–õ–£–ß–ï–ù–ò–ï file_id —Ñ–æ—Ç–æ
# async def get_file_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
#     if update.message.photo:
#         file_id = update.message.photo[-1].file_id
#         await update.message.reply_text(f"file_id: {file_id}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    users = await load_data()
    if user_id not in users:
        users[user_id] = {
            "status": "normal",
            "chat_with": None,
            "interests": [],
            "gender": None,
            "premium": False,
            "chats_count": 0,
            "likes": 0,
            "dislikes": 0
        }
        await save_data(users)
    if users[user_id]["status"] == "chatting":
        await update.message.reply_text(
            "ü•∑ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫*\n\n/next ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/stop ‚Äî _–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥_",
            parse_mode=telegram.constants.ParseMode.MARKDOWN
        )
        return
    if users[user_id]["status"] == "in search":
        await update.message.reply_text(
            "_–ú—ã —É–∂–µ –∏—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._",
            parse_mode=telegram.constants.ParseMode.MARKDOWN
        )
        return

    photo_file_id = 'AgACAgIAAxkBAAIq72eBGj6uFSeSE1dKa1zxAsS5LbWdAAKN6DEb45v5S1f--cKVyg-zAQADAgADeAADNgQ'

    # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É
    inline_button = InlineKeyboardButton("–ê–≤—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞", url="https://t.me/ibuzy")
    inline_keyboard = InlineKeyboardMarkup([[inline_button]])

    await context.bot.send_photo(
        chat_id=update.effective_chat.id,
        photo=photo_file_id,
        caption="*üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç –¥–ª—è –æ–±—â–µ–Ω–∏—è 1 –Ω–∞ 1 —Å–æ —Å–ª—É—á–∞–π–Ω—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º!*\n\n*üõ° –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö*\n*üé≠ –ü–æ–ª–Ω–∞—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç—å*\n*üìô –ò–Ω—Ç–µ—Ä–µ—Å—ã –¥–ª—è –æ–±—â–µ–Ω–∏—è*\n*üíÖ –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –ø–æ–ª—É*\n\n_–ü—Ä–æ—Å–∏–º –≤–∞—Å —Å–æ–±–ª—é–¥–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —ç—Ç–∏–∫–µ—Ç–∞ –∏ –ø—Ä–∏–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∏ –¥–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–æ–Ω–∞ –≤ –æ–±—â–µ–Ω–∏–∏ –≤ —á–∞—Ç–µ._",
        parse_mode=telegram.constants.ParseMode.MARKDOWN,
        reply_markup=inline_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        "_üí≠ –î–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ_",
        parse_mode=telegram.constants.ParseMode.MARKDOWN,
        reply_markup=get_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
def get_interests_keyboard(selected_interests=[]):
    interests = ["–ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞", "–ú–µ–º—ã", "–°–ø–æ—Ä—Ç", "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è", "–ö–∏–Ω–æ", "–ö–Ω–∏–≥–∏", "–û–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ò–≥—Ä—ã"]
    buttons = []
    for i in range(0, len(interests), 2):
        row = []
        for j in range(2):
            if i + j < len(interests):
                interest = interests[i + j]
                if interest in selected_interests:
                    row.append(InlineKeyboardButton(f"‚úÖ {interest}", callback_data=f"interest_{interest}"))
                else:
                    row.append(InlineKeyboardButton(interest, callback_data=f"interest_{interest}"))
        buttons.append(row)
    buttons.append([InlineKeyboardButton("‚ùå –°–±—Ä–æ—Å–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã", callback_data="reset_interests")])
    return InlineKeyboardMarkup(buttons)

# –ö–æ–º–∞–Ω–¥–∞ /interests
async def interests_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    selected_interests = users[user_id].get("interests", [])
    await update.message.reply_text(
        "*üìô –ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞*\n\n_–ú—ã –±—É–¥–µ–º —Å—Ç–∞—Ä–∞—Ç—å—Å—è –∏—Å–∫–∞—Ç—å –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Å –ø–æ—Ö–æ–∂–∏–º–∏ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º–∏._\n\n_–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã:_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_interests_keyboard(selected_interests)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
async def reset_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    
    if users[user_id].get("interests"):
        users[user_id]["interests"] = []
        await save_data(users)
        try:
            await query.edit_message_reply_markup(reply_markup=get_interests_keyboard(users[user_id]["interests"]))
        except telegram.error.BadRequest as e:
            if str(e) == "Message is not modified: specified new message content and reply markup are exactly the same as a current content and reply markup of the message":
                logging.info(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –ø—É—Å—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ.")
            else:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤: {e}")
    else:
        logging.info(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É–∂–µ –ø—É—Å—Ç—ã.")
        await query.answer("–£ –≤–∞—Å —É–∂–µ –Ω–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤.", show_alert=False)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
async def handle_interests(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    interest = query.data.replace("interest_", "")
    if interest in users[user_id]["interests"]:
        users[user_id]["interests"].remove(interest)
    else:
        users[user_id]["interests"].append(interest)
    await save_data(users)
    await query.edit_message_reply_markup(reply_markup=get_interests_keyboard(users[user_id]["interests"]))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    await query.edit_message_text(
        f"–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(users[user_id]['interests']) or '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'}"
    )
    await query.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã.", reply_markup=get_keyboard())

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE, skip_searching_message=False):
    user_id = str(update.effective_user.id)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if user_id not in users:
        users[user_id] = {"status": "normal", "chat_with": None, "interests": [], "gender": None, "premium": False}
        await save_data(users)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if users[user_id]["status"] == "banned":
        await update.message.reply_text(
            "*‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.*\n\n*–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ
    if users[user_id]["status"] == "chatting":
        await update.message.reply_text(
            "ü•∑ *–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫*\n\n/next ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/stop ‚Äî _–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—â–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    if users[user_id]["status"] == "in search":
        if not skip_searching_message:
            await update.message.reply_text("_–ú—ã —É–∂–µ –∏—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._", parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard(True))
        return

    logging.info(f"(!) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞—á–∞–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. (!)")

    users[user_id]["status"] = "in search"
    users[user_id]["search_via_gender"] = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—É
    await save_data(users)
    if not skip_searching_message:
        await update.message.reply_text("_–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._", parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard(True))

    await find_partner(update, context)

async def find_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_interests = set(users[user_id].get("interests", []))
    search_via_gender = users[user_id].get("search_via_gender", False)
    search_gender = users[user_id].get("search_gender", None)

    for other_user, other_user_data in users.items():
        if other_user_data["status"] == "in search" and other_user != user_id:
            if await is_blocked(user_id, other_user):
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –ø–æ–ª–∞ –¥–ª—è –≥–µ–Ω–¥–µ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –æ–±–æ–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            if search_via_gender and other_user_data.get("gender") != search_gender:
                continue
            if other_user_data.get("search_via_gender", False) and other_user_data.get("search_gender") and other_user_data["search_gender"] != users[user_id].get("gender"):
                continue

            other_user_interests = set(users[other_user].get("interests", []))
            common_interests = user_interests & other_user_interests

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
            if user_interests and other_user_interests and not common_interests:
                continue

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–µ–∑ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ —Å–æ–µ–¥–∏–Ω—è–ª–∏—Å—å —Ç–æ–ª—å–∫–æ —Å —Ç–∞–∫–∏–º–∏ –∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
            if not user_interests and other_user_interests:
                continue
            if user_interests and not other_user_interests:
                continue

            users[user_id]["chat_with"] = other_user
            users[other_user]["chat_with"] = user_id
            active_chats[user_id] = {"chat_with": other_user, "message_map": {}}
            active_chats[other_user] = {"chat_with": user_id, "message_map": {}}
            users[user_id]["status"] = "chatting"
            users[other_user]["status"] = "chatting"
            await save_data(users)
            await save_active_chats()

            logging.info(f"(!) –°–æ–∑–¥–∞–Ω –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {other_user}. (!)")

            common_interests_str = ", ".join(common_interests)
            common_interests_message = f"_–û–±—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {common_interests_str}_" if common_interests else ""

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message_parts = ["*üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*"]

            if common_interests:
                user_message_parts.append(f"\n{common_interests_message}")

            user_message_parts.append("\n/next ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/stop ‚Äî _–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_")
            user_message = "\n".join(user_message_parts)

            await update.message.reply_text(user_message, parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())

            # –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            other_user_message_parts = ["*üîé –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω!*"]

            if common_interests:
                other_user_message_parts.append(f"\n{common_interests_message}")

            other_user_message_parts.append("\n/next ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/stop ‚Äî _–∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_")
            other_user_message = "\n".join(other_user_message_parts)

            await context.bot.send_message(other_user, other_user_message, parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardRemove())
            return

    #await update.message.reply_text("–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –Ω–µ—Ç.\n\n–ü–æ–∏—Å–∫ –∑–∞–π–º–µ—Ç –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —á–µ–º –æ–±—ã—á–Ω–æ...", reply_markup=get_keyboard(True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É"
async def gender_search_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if users[user_id]["status"] == "banned":
        await update.message.reply_text(
            "*‚ö†Ô∏è –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫.*\n\n*–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.*",
            parse_mode=ParseMode.MARKDOWN
        )
        return
    
    if not users[user_id].get("premium", False):
        photo_file_id = 'AgACAgIAAxkBAAIrPGeBJTFQfZuJnOmUeXkUoemEdU7oAALj5jEbXEMISHAa4jiqR3QuAQADAgADeAADNgQ'
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
        inline_button = InlineKeyboardButton("–ö—É–ø–∏—Ç—å Premium", url="https://t.me/ibuzy")
        inline_keyboard = InlineKeyboardMarkup([[inline_button]])

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_file_id,
            caption='_–î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏_ *üé≠ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É* _–Ω—É–∂–µ–Ω Premium —Å—Ç–∞—Ç—É—Å!_\n_–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium –º–æ–∂–Ω–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=inline_keyboard
        )
        return

    buttons = [
        [KeyboardButton("üë®‚Äçü¶∞ –ü–æ–∏—Å–∫ –ú"), KeyboardButton("üë©‚Äçü¶± –ü–æ–∏—Å–∫ –î")],
        [KeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥")]
    ]
    await update.message.reply_text("_–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –¥–ª—è –ø–æ–∏—Å–∫–∞:_", parse_mode=ParseMode.MARKDOWN, reply_markup=ReplyKeyboardMarkup(buttons, resize_keyboard=True))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ø–æ–ª—É
async def gender_search(update: Update, context: ContextTypes.DEFAULT_TYPE, skip_searching_message=False):
    user_id = str(update.effective_user.id)
    if not users[user_id].get("premium", False):
        photo_file_id = 'AgACAgIAAxkBAAIrPGeBJTFQfZuJnOmUeXkUoemEdU7oAALj5jEbXEMISHAa4jiqR3QuAQADAgADeAADNgQ'
        
        # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫—É "–ö—É–ø–∏—Ç—å –ø—Ä–µ–º–∏—É–º"
        inline_button = InlineKeyboardButton("–ö—É–ø–∏—Ç—å Premium", url="https://t.me/ibuzy")
        inline_keyboard = InlineKeyboardMarkup([[inline_button]])

        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_file_id,
            caption='_–î–ª—è —Ñ—É–Ω–∫—Ü–∏–∏_ *üé≠ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É* _–Ω—É–∂–µ–Ω Premium —Å—Ç–∞—Ç—É—Å!_\n_–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ Premium –º–æ–∂–Ω–æ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞_',
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=inline_keyboard
        )
        return

    gender = None
    if update.message.text == "üë®‚Äçü¶∞ –ü–æ–∏—Å–∫ –ú":
        gender = "m"
    elif update.message.text == "üë©‚Äçü¶± –ü–æ–∏—Å–∫ –î":
        gender = "w"
    else:
        return  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!" –∏ –Ω–µ –º–µ–Ω—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    if not skip_searching_message:
        await update.message.reply_text("_–ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._", parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard(True))

    users[user_id]["status"] = "in search"
    users[user_id]["search_via_gender"] = True  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É
    users[user_id]["search_gender"] = gender
    await save_data(users)

    await find_partner(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    user_data = users.get(user_id, {"gender": "–Ω–µ —É–∫–∞–∑–∞–Ω", "premium": False, "chats_count": 0, "likes": 0, "dislikes": 0})
    
    current_gender = user_data.get("gender", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    if current_gender == "m":
        current_gender_text = "–º—É–∂—á–∏–Ω–∞"
    elif current_gender == "w":
        current_gender_text = "–¥–µ–≤—É—à–∫–∞"
    else:
        current_gender_text = "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    premium_status = "–ï—Å—Ç—å" if user_data.get("premium", False) else "–ù–µ—Ç"
    chats_count = user_data.get("chats_count", 0)
    likes = user_data.get("likes", 0)
    dislikes = user_data.get("dislikes", 0)

    profile_message = (
        f"#Ô∏è‚É£ ID ‚Äî {user_id}\n\n"
        f"üë´ –ü–æ–ª ‚Äî {current_gender_text}\n"
        f"üí¨ –ß–∞—Ç–æ–≤ ‚Äî {chats_count}\n"
        f"üëÅ –ö–∞—Ä–º–∞ ‚Äî üëç {likes} üëé {dislikes}\n\n"
        f"üëë VIP —Å—Ç–∞—Ç—É—Å ‚Äî {premium_status}"
    )

    buttons = [
        [InlineKeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞", callback_data="profile_settings")]
    ]

    if update.message:
        await update.message.reply_text(profile_message, reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)
    elif update.callback_query:
        query = update.callback_query
        await query.edit_message_text(profile_message, reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Ñ–∏–ª—è
async def profile_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    current_gender = users[user_id].get("gender", "–Ω–µ —É–∫–∞–∑–∞–Ω")
    if current_gender == "m":
        current_gender_text = "–º—É–∂—á–∏–Ω–∞"
    elif current_gender == "w":
        current_gender_text = "–¥–µ–≤—É—à–∫–∞"
    else:
        current_gender_text = "–Ω–µ —É–∫–∞–∑–∞–Ω"

    if current_gender_text == "–Ω–µ —É–∫–∞–∑–∞–Ω":
        message_text = "*üíÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞*\n\n_–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –Ω–∞—Ö–æ–¥–∏–ª –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –±—ã—Å—Ç—Ä–µ–µ._\n\n_–£ –≤–∞—Å –Ω–µ —É–∫–∞–∑–∞–Ω –ø–æ–ª üëÄ_"
    else:
        message_text = f"*üíÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª–∞*\n\n_–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª, —á—Ç–æ–±—ã –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É –Ω–∞—Ö–æ–¥–∏–ª –≤–∞–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –±—ã—Å—Ç—Ä–µ–µ._\n\n_–¢–µ–∫—É—â–∏–π –ø–æ–ª: {current_gender_text}_"

    buttons = [
        [
            InlineKeyboardButton("üë®‚Äçü¶∞ –Ø –ø–∞—Ä–µ–Ω—å", callback_data="set_gender_m"),
            InlineKeyboardButton("üë©‚Äçü¶± –Ø –¥–µ–≤—É—à–∫–∞", callback_data="set_gender_w")
        ],
        [InlineKeyboardButton("‚ùå –£–¥–∞–ª–∏—Ç—å –º–æ–π –ø–æ–ª", callback_data="delete_gender")],
        [InlineKeyboardButton("‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back_to_profile")]
    ]

    await query.edit_message_text(message_text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
async def handle_gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if query.data == "set_gender_m":
        users[user_id]["gender"] = "m"
    elif query.data == "set_gender_w":
        users[user_id]["gender"] = "w"
    elif query.data == "delete_gender":
        if "gender" in users[user_id]:
            del users[user_id]["gender"]

    await save_data(users)
    await profile_command(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é
async def back_to_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await profile_command(update, context)

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞
async def stop_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if users[user_id]["status"] != "in search":
        await update.message.reply_text("_–í—ã –Ω–µ –≤ –ø–æ–∏—Å–∫–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_", parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard())
        return
    logging.info(f"(!) –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. (!)")
    users[user_id]["status"] = "normal"
    was_gender_search = users[user_id].pop("search_via_gender", False)
    users[user_id].pop("search_gender", None)
    await save_data(users)
    
    if was_gender_search:
        await update.message.reply_text("_–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω_", parse_mode=ParseMode.MARKDOWN)
        await gender_search_menu(update, context)
    else:
        await update.message.reply_text("_–ü–æ–∏—Å–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω_", parse_mode=ParseMode.MARKDOWN, reply_markup=get_keyboard())

# –ö–æ–º–∞–Ω–¥–∞ /next
async def next_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in active_chats:
        await update.message.reply_text(
            "üö´ *–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ!*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard()
        )
        return
    other_user = active_chats[user_id]["chat_with"]
    del active_chats[user_id]
    del active_chats[other_user]

    blocked_users = await load_blocked_users()
    timeout_str = blocked_users.get("timeout_duration", "1h")
    time_amount = int(timeout_str[:-1])
    time_unit = timeout_str[-1]

    if time_unit == 's':
        timeout_duration = timedelta(seconds=time_amount)
    elif time_unit == 'm':
        timeout_duration = timedelta(minutes=time_amount)
    elif time_unit == 'h':
        timeout_duration = timedelta(hours=time_amount)
    elif time_unit == 'd':
        timeout_duration = timedelta(days(time_amount))

    now = datetime.now()
    pair = ",".join(sorted([user_id, other_user]))
    blocked_users[pair] = (now + timeout_duration).isoformat()

    await save_blocked_users(blocked_users)
    await save_active_chats()

    users[other_user]["status"] = "normal"
    users[other_user]["chat_with"] = None
    users[other_user]["chats_count"] += 1
    users[user_id]["chats_count"] += 1
    await save_data(users)

    try:
        await context.bot.send_message(
            other_user,
            "üõë *–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard(),
        )
        await context.bot.send_message(
            other_user,
            "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üëç", callback_data=f"like_{user_id}"),
                 InlineKeyboardButton("üëé", callback_data=f"dislike_{user_id}")]
            ])
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {other_user}: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É
    if users[user_id].get("search_via_gender", False):
        gender = users[other_user].get("gender")
        if gender:
            if gender == "m":
                await update.message.reply_text(
                    "_–¢–µ–∫—É—â–∏–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –º—É–∂—Å–∫–æ–≥–æ –ø–æ–ª–∞..._",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_keyboard(True),
                )
                users[user_id]["search_gender"] = "m"
            elif gender == "w":
                await update.message.reply_text(
                    "_–¢–µ–∫—É—â–∏–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∂–µ–Ω—Å–∫–æ–≥–æ –ø–æ–ª–∞..._",
                    parse_mode=ParseMode.MARKDOWN,
                    reply_markup=get_keyboard(True),
                )
                users[user_id]["search_gender"] = "w"
            await save_data(users)
            await gender_search(update, context, skip_searching_message=True)
        else:
            await update.message.reply_text(
                "_–¢–µ–∫—É—â–∏–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_keyboard(True),
            )
    else:
        await update.message.reply_text(
            "_–¢–µ–∫—É—â–∏–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞..._",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard(True),
        )

    await update.message.reply_text(
        "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç", callback_data=f"like_{other_user}"),
             InlineKeyboardButton("üëé", callback_data=f"dislike_{other_user}")]
        ])
    )

    if users[user_id]["status"] == "premium":
        users[user_id]["search_status"] = "in search"
    else:
        users[user_id]["status"] = "in search"
    users[user_id]["chat_with"] = None
    await save_data(users)

    await search(update, context, skip_searching_message=True)

# –ö–æ–º–∞–Ω–¥–∞ /stop
async def stop_chat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in active_chats:
        await update.message.reply_text(
            "üö´ *–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ!*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard())
        return
    other_user = active_chats[user_id]["chat_with"]
    del active_chats[user_id]
    del active_chats[other_user]

    blocked_users = await load_blocked_users()
    timeout_str = blocked_users.get("timeout_duration", "1h")
    time_amount = int(timeout_str[:-1])
    time_unit = timeout_str[-1]

    if time_unit == 's':
        timeout_duration = timedelta(seconds=time_amount)
    elif time_unit == 'm':
        timeout_duration = timedelta(minutes=time_amount)
    elif time_unit == 'h':
        timeout_duration = timedelta(hours=time_amount)
    elif time_unit == 'd':
        timeout_duration = timedelta(days=time_amount)

    now = datetime.now()
    pair = ",".join(sorted([user_id, other_user]))
    blocked_users[pair] = (now + timeout_duration).isoformat()

    await save_blocked_users(blocked_users)
    await save_active_chats()

    users[user_id]["chat_with"] = None
    users[other_user]["chat_with"] = None
    users[other_user]["status"] = "normal"
    users[other_user]["chats_count"] += 1
    users[user_id]["chats_count"] += 1
    await save_data(users)
    logging.info(f"(!) –ß–∞—Ç –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id} –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {other_user} –∑–∞–≤–µ—Ä—à–µ–Ω, –æ–Ω–∏ –∑–∞–Ω–µ—Å–µ–Ω—ã –≤ –±–ª–æ–∫ –Ω–∞ {timeout_duration}. (!)")
    
    if users[user_id]["status"] == "premium":
        users[user_id]["search_status"] = "normal"
    else:
        users[user_id]["status"] = "normal"
    await save_data(users)

    await update.message.reply_text(
        "üõë *–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_keyboard()
    )

    await update.message.reply_text(
        "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç", callback_data=f"like_{other_user}"),
             InlineKeyboardButton("üëé", callback_data=f"dislike_{other_user}")]
        ])
    )

    await context.bot.send_message(
        other_user,
        "üõë *–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=get_keyboard(),
    )

    await context.bot.send_message(
        other_user,
        "_–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ –≤–∞—à–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:_",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üëç", callback_data=f"like_{user_id}"),
             InlineKeyboardButton("üëé", callback_data=f"dislike_{user_id}")]
        ])
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ü–µ–Ω–∫–∏
async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data.split('_')
    action = data[0]
    rated_user_id = data[1]

    if action == "like":
        users[rated_user_id]["likes"] += 1
    elif action == "dislike":
        users[rated_user_id]["dislikes"] += 1

    await save_data(users)
    await query.answer()
    await query.edit_message_text("_–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!_", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /link
async def link(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in active_chats:
        await update.message.reply_text(
            "üö´ *–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ!*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
            parse_mode=ParseMode.MARKDOWN)
        return
    other_user_id = active_chats[user_id]["chat_with"]
    if not update.effective_user.username:
        await update.message.reply_text("–í–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∫—Ä—ã—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ò–∑–º–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, —á—Ç–æ–±—ã –¥–µ–ª–∏—Ç—å—Å—è –∞–∫–∫–∞—É–Ω—Ç–æ–º.")
        return
    try:
        await context.bot.send_message(
            chat_id=other_user_id,
            text=f"–í–∞—à —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: @{update.effective_user.username}"
        )
        await update.message.reply_text("–°—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Å—ã–ª–∫–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
async def done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    await query.edit_message_text(
        f"–í–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {', '.join(users[user_id]['interests']) or '–ù–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤'}"
    )
    await query.message.reply_text("–ò–Ω—Ç–µ—Ä–µ—Å—ã –≤—ã–±—Ä–∞–Ω—ã.", reply_markup=get_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in users:
        users[user_id] = {"status": "normal", "chat_with": None, "interests": [], "gender": None, "premium": False}
        await save_data(users)
    if user_id not in active_chats:
        if update.message.text == "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞":
            await search(update, context)
        elif update.message.text == "‚ùå –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫":
            await stop_search(update, context)
        elif update.message.text == "üìô –ò–Ω—Ç–µ—Ä–µ—Å—ã":
            await interests_command(update, context)
        elif update.message.text == "üé≠ –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ª—É":
            await gender_search_menu(update, context)
        elif update.message.text == "üíº –ü—Ä–æ—Ñ–∏–ª—å":
            await profile_command(update, context)
        elif update.message.text == "üë®‚Äçü¶∞ –ü–æ–∏—Å–∫ –ú" or update.message.text == "üë©‚Äçü¶± –ü–æ–∏—Å–∫ –î":
            await gender_search(update, context)
        elif update.message.text == "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥":
            users[user_id]["status"] = "normal"
            await save_data(users)
            await update.message.reply_text(
                "_–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é_",
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=get_keyboard()
            )
        else:
            if users[user_id].get("search_via_gender", False):
                reply_markup = get_keyboard(True)
            elif users[user_id]["status"] == "in search":
                reply_markup = get_keyboard(True)
            else:
                reply_markup = get_keyboard()
        return

    other_user_id = active_chats[user_id]["chat_with"]
    text = update.message.text

    if text and "@" in text and not text.startswith("/link"):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—Ä–µ—â–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /link.")
        return
    if text and re.search(r"(https?://|www\.[a-zA-Z]|[a-zA-Z]\.[a-z]{2,})", text.replace(" ", "")):
        await update.message.reply_text("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–∞.")
        return

    try:
        reply_to_message_id = None
        if update.message.reply_to_message:
            replied_message_id = update.message.reply_to_message.message_id
            if "message_map" in active_chats[user_id] and replied_message_id in active_chats[user_id]["message_map"]:
                reply_to_message_id = active_chats[user_id]["message_map"][replied_message_id]

        if update.message.text:
            sent_message = await context.bot.send_message(
                chat_id=other_user_id,
                text=update.message.text,
                entities=update.message.entities,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
            )
        elif update.message.photo:
            sent_message = await context.bot.send_photo(
                chat_id=other_user_id,
                photo=update.message.photo[-1].file_id,
                caption=update.message.caption,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
                caption_entities=update.message.caption_entities,
            )
        elif update.message.video:
            sent_message = await context.bot.send_video(
                chat_id=other_user_id,
                video=update.message.video.file_id,
                caption=update.message.caption,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
                caption_entities=update.message.caption_entities,
            )
        elif update.message.document:
            sent_message = await context.bot.send_document(
                chat_id=other_user_id,
                document=update.message.document.file_id,
                caption=update.message.caption,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
                caption_entities=update.message.caption_entities,
            )
        elif update.message.audio:
            sent_message = await context.bot.send_audio(
                chat_id=other_user_id,
                audio=update.message.audio.file_id,
                caption=update.message.caption,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
                caption_entities=update.message.caption_entities,
            )
        elif update.message.voice:
            sent_message = await context.bot.send_voice(
                chat_id=other_user_id,
                voice=update.message.voice.file_id,
                caption=update.message.caption,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
                caption_entities=update.message.caption_entities,
            )
        elif update.message.sticker:
            sent_message = await context.bot.send_sticker(
                chat_id=other_user_id,
                sticker=update.message.sticker.file_id,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
            )
        elif update.message.video_note:
            sent_message = await context.bot.send_video_note(
                chat_id=other_user_id,
                video_note=update.message.video_note.file_id,
                reply_to_message_id=reply_to_message_id,
                protect_content=True,
            )
        else:
            await update.message.reply_text("–≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            return

        if "message_map" not in active_chats[user_id]:
            active_chats[user_id]["message_map"] = {}
        if "message_map" not in active_chats[other_user_id]:
            active_chats[other_user_id]["message_map"] = {}
        active_chats[user_id]["message_map"][update.message.message_id] = sent_message.message_id
        active_chats[other_user_id]["message_map"][sent_message.message_id] = update.message.message_id

        await save_active_chats()

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")

# –ö–æ–º–∞–Ω–¥–∞ /premium
async def premium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if len(context.args) != 1:
        await update.message.reply_text("_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /premium <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>_", parse_mode=ParseMode.MARKDOWN)
        return

    target_id = context.args[0]
    if target_id not in users:
        await update.message.reply_text(f"_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω._", parse_mode=ParseMode.MARKDOWN)
        return

    users[target_id]["premium"] = True
    await save_data(users)

    await context.bot.send_message(
        chat_id=target_id,
        text="*üëë –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω Premium —Å—Ç–∞—Ç—É—Å!*",
        parse_mode=ParseMode.MARKDOWN,
    )
    await update.message.reply_text(f"*üëë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id {target_id} –±—ã–ª –≤—ã–¥–∞–Ω Premium —Å—Ç–∞—Ç—É—Å*", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /unpremium
async def unpremium_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /unpremium <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>", parse_mode=ParseMode.MARKDOWN)
        return

    target_id = context.args[0]
    if target_id not in users:
        await update.message.reply_text(f"_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω._", parse_mode=ParseMode.MARKDOWN)
        return

    users[target_id]["premium"] = False
    await save_data(users)

    await update.message.reply_text(f"*‚öîÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {target_id} –±—ã–ª –∑–∞–±—Ä–∞–Ω Premium —Å—Ç–∞—Ç—É—Å*", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /ban
async def ban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if len(context.args) != 1:
        await update.message.reply_text("_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /ban <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>_", parse_mode=ParseMode.MARKDOWN)
        return

    target_id = context.args[0]
    if target_id not in users:
        await update.message.reply_text(f"_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω._", parse_mode=ParseMode.MARKDOWN)
        return

    users[target_id]["status"] = "banned"
    await save_data(users)

    if target_id in active_chats:
        chat_with_id = active_chats[target_id]["chat_with"]
        del active_chats[target_id]
        del active_chats[chat_with_id]
        await save_active_chats()
        await context.bot.send_message(
            chat_with_id,
            "*‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —Å –∫–æ—Ç–æ—Ä—ã–º –≤—ã –æ–±—â–∞–ª–∏—Å—å, –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard()
        )
        await context.bot.send_message(
            target_id,
            "*‚ö†Ô∏è –í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –ß–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.*",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=get_keyboard()
        )
        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å "normal" —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        users[chat_with_id]["status"] = "normal"
        await save_data(users)

    await update.message.reply_text(f"*üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /unban
async def unban_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if len(context.args) != 1:
        await update.message.reply_text("_–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /unban <id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>_", parse_mode=ParseMode.MARKDOWN)
        return

    target_id = context.args[0]
    if target_id not in users:
        await update.message.reply_text(f"_–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} –Ω–µ –Ω–∞–π–¥–µ–Ω._", parse_mode=ParseMode.MARKDOWN)
        return

    users[target_id]["status"] = "normal"
    await save_data(users)
    await update.message.reply_text(f"*‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å id {target_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω*", parse_mode=ParseMode.MARKDOWN)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats
async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    users = await load_data()
    active_chats = await load_active_chats()
    blocked_users = await load_blocked_users()

    total_users = len(users)
    active_chats_count = len(active_chats)
    blocked_users_count = sum(1 for user in users.values() if user["status"] == "banned")
    timeout_users_count = sum(1 for pair, block_time in blocked_users.items() if block_time != "timeout_duration")
    searching_users_count = sum(1 for user in users.values() if user["status"] == "in search")

    stats_message = (
        f"*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞*\n\n"
        f"üë• –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üí¨ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {active_chats_count}\n"
        f"üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–æ–∏—Å–∫–µ: {searching_users_count}\n"
        f"‚è≥ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ —Ç–∞–π–º-–∞—É—Ç–µ: {timeout_users_count}\n"
        f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {blocked_users_count}"
    )

    await update.message.reply_text(stats_message, parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /debug
async def debug_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ "normal", –∫—Ä–æ–º–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
    for user in users:
        if users[user]["status"] != "banned":
            users[user]["status"] = "normal"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ users.json
    await save_data(users)
    
    # –û—á–∏—â–∞–µ–º active_chats.json
    active_chats.clear()
    await save_active_chats()

    # –û—á–∏—â–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º timeout_duration
    blocked_users = await load_blocked_users()
    timeout_duration = blocked_users.get("timeout_duration", "1h")
    blocked_users = {"timeout_duration": timeout_duration}
    await save_blocked_users(blocked_users)

    await update.message.reply_text("–î–µ–±–∞–≥ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª. –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–±—Ä–æ—à–µ–Ω—ã –≤ 'normal', –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –æ—á–∏—â–µ–Ω—ã, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã.")

# –ö–æ–º–∞–Ω–¥–∞ /getid
async def getid_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ user_id –∫ —Å—Ç—Ä–æ–∫–µ
    if user_id != str(ADMIN_ID):  # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ ADMIN_ID –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º
        return

    if user_id not in active_chats:
        await update.message.reply_text("üö´ *–î–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ!*\n\n/search ‚Äî _–∏—Å–∫–∞—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞_\n/interests ‚Äî _–∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã –ø–æ–∏—Å–∫–∞_", parse_mode=ParseMode.MARKDOWN)
        return

    chat_with_id = active_chats[user_id]["chat_with"]
    await update.message.reply_text(f"_ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: {chat_with_id}_", parse_mode=ParseMode.MARKDOWN)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def run_bot():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    application = Application.builder().token(TOKEN).build()

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    global users, active_chats, blocked_users
    users = await load_data()
    active_chats = await load_active_chats()
    blocked_users = await load_blocked_users()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("search", search))
    application.add_handler(CommandHandler("next", next_command))
    application.add_handler(CommandHandler("stop", stop_chat))
    application.add_handler(CommandHandler("link", link))
    application.add_handler(CommandHandler("interests", interests_command))
    application.add_handler(CommandHandler("debug", debug_command))
    application.add_handler(CommandHandler("ban", ban_command))
    application.add_handler(CommandHandler("unban", unban_command))
    application.add_handler(CommandHandler("getid", getid_command))
    application.add_handler(CommandHandler("timeout", timeout_command))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("premium", premium_command))
    application.add_handler(CommandHandler("unpremium", unpremium_command))
    application.add_handler(CommandHandler("profile", profile_command))
    application.add_handler(CallbackQueryHandler(handle_interests, pattern="^interest_"))
    application.add_handler(CallbackQueryHandler(done, pattern="^done$"))
    application.add_handler(CallbackQueryHandler(reset_interests, pattern="^reset_interests$"))
    application.add_handler(CallbackQueryHandler(handle_gender, pattern="^set_gender_"))
    application.add_handler(CallbackQueryHandler(handle_gender, pattern="^delete_gender$"))
    application.add_handler(CallbackQueryHandler(profile_settings, pattern="^profile_settings$"))
    application.add_handler(CallbackQueryHandler(back_to_profile, pattern="^back_to_profile$"))
    application.add_handler(CallbackQueryHandler(handle_rating, pattern="^(like|dislike)_"))
    application.add_handler(MessageHandler((filters.TEXT | filters.ATTACHMENT) & ~filters.COMMAND, handle_message))

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ç–∞–π–º-–∞—É—Ç–∞ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    if "timeout_duration" in blocked_users:
        application.bot_data["last_timeout"] = blocked_users["timeout_duration"]
    else:
        application.bot_data["last_timeout"] = "1h"

    return application

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    try:
        # –°–æ–∑–¥–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º event loop
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
        app = loop.run_until_complete(run_bot())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop.run_until_complete(app.run_polling(
            allowed_updates=Update.ALL_TYPES,
            stop_signals=None
        ))
        
    except KeyboardInterrupt:
        logging.info("Bot stopped by user")
        loop.run_until_complete(app.stop())
    except Exception as e:
        logging.error(f"Bot stopped due to error: {e}")
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º loop
        loop.close()

if __name__ == "__main__":
    main()